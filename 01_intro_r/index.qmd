---
title: "Grupo de Estudos em R e Estatística (GERE)"
subtitle: "Cap. 04 - Introdução ao R"
date: "2023-05-05"
date-format: long
author: "[Maurício Vancine](https://mauriciovancine.github.io/)"
format: 
  revealjs:
    theme: [custom.scss]
    slide-number: c/t
    show-slide-number: all
    hash-type: number
    preview-links: false
    chalkboard: true
    logo: https://raw.githubusercontent.com/grupo-estudos-r-estatistica/logo/main/featured-hex.png
    execute:
      echo: true
      eval: true
      warning: false
      message: false
editor: visual
lang: pt
---

## Grupo de Estudos em R e Estatística (GERE)

**Objetivos**

- Difusão e capacitação no uso da linguagem R e sua aplicação em abordagem quantitativas e estatísticas

- Conformidade com o Art. 2º da Portaria UNESP 69/2022 (Ligas acadêmicas)

- Aprimorar a formação técnico-científica e humanística dos graduandos e pós-graduandos 

- Fomentar um espaço de convivência e aprendizado entre os membros da comunidade unespiana

## Grupo de Estudos em R e Estatística (GERE)

**Funcionamento: Estatuto e Plano Acadêmico**

- 8 horas/mês com presença mínima de 75% (sujeito à sanções, exceto em casos de falta justificada e aprovada pelo comitê)

- Comitê gestor democraticamente eleito por Assembleia Geral e sujeito à avaliações periódicas

- É um dever dos associados a conduta ética e pró-ativa, que preserve a respeitabilidade da liga e promova seus objetivos

# Comunicação

## Discord

Vamos concentrar a comunicação pelo Discord

<br>
<center>
<img src="img/discord.png" style="width:40%"/>
</center>

# Material

## GitHub

Todo o material está e estará disponível no [GitHub](https://github.com/grupo-estudos-r-estatistica)

<center>
<img src="img/github.png" style="width:50%"/>
</center>

:::footer
[GitHub](https://github.com/grupo-estudos-r-estatistica)
:::

# Proposta

## Análises Ecológicas no R

::: columns
::: {.column width="40%"}
<center>
<img src="img/aer.jpeg" href="https://analises-ecologicas.com/" style="width:90%"/>
</center>
:::

::: {.column width="60%"}

- 15 capítulos: linguagem R, tidyverse, perguntas em ecologia, análises univariadas, multivariadas e geoespaciais

- [bookdown](https://analises-ecologicas.com/)

- [PDF](https://canal6.com.br/livreacesso/livro/analises-ecologicas-no-r/)

- [Amazon](https://www.amazon.com.br/An%C3%A1lises-ecol%C3%B3gicas-Ferdo-Rodrigues-Silva/dp/857917564X/ref=sr_1_1?keywords=9788579175640&qid=1654379366&sr=8-1)

- [Código Fonte](https://github.com/paternogbc/livro_aer)

- [YouTube](https://www.youtube.com/channel/UCLSVSCnmvf2k6OoWZCnEO4w)

:::
:::

:::footer
[Da Silva et al. (2022)](https://analises-ecologicas.com/)
:::

## Princípios de Estatística em Ecologia {.smaller}

::: columns
::: {.column width="40%"}
<center>
<img src="img/pee.jpg" href="https://loja.grupoa.com.br/principios-de-estatistica-em-ecologia9788536324326-p991743" style="width:90%"/>
</center>
:::

::: {.column width="60%"}

1. Introdução à probabilidade
1. Variáveis aleatórias e distribuição de probabilidade
1. Estatística descritiva
1. Formulando e testando hipóteses
1. Três estruturas para análises estatísticas
1. Delineando estudos de campo com sucesso
1. Um bestiário de delineamento
1. Gestão e curadoria de dados
1. Regressão
1. Análise de variância
1. Análise de dados categóricos
1. Análise de dados multivariados

:::
:::

:::footer
[Gotelli & Ellison (2010)](https://loja.grupoa.com.br/principios-de-estatistica-em-ecologia9788536324326-p991743)
:::

## IMPORTANTE!!!

**Estamos num espaço seguro e amigável**

Sintam-se à vontade para me interromper e tirar dúvidas

<center><img src="img/general_starwars_teamwork.png" style="width:50%"/></center>

::: footer
[\@allison_horst](https://twitter.com/allison_horst)
:::

## Linguagem R

O R é uma **linguagem de programação livre** (*open source*), direcionada à **manipulação, análise e visualização de dados**, com diversas **expansões** (*pacotes*) para **dados** ou **análises** específicas

<center><img src="img/r_logo.svg" style="width:40%"/></center>

::: footer
[R](https://www.r-project.org/)
:::

## Histórico - Linguagem S {.smaller}

**John M. Chambers (Stanford University, CA, EUA)**

<br>

**Versões**

-   Old S (1976-1987)
-   New S (1988-1997)
-   S4 (1998)

**IDE (*Integrated Development Environment*)**

-   Interface: S-PLUS (1988-2008)

![](img/person_john_chambers.jpg){.absolute width="400" height="400" right="10" top="200"}

::: footer
[Wickham (2013)](http://vita.had.co.nz/papers/r-s.pdf)
:::

## Histórico - Linguagem R {.smaller}

**Robert Gentleman e Ross Ihaka (Auckland University, NZ)**

<br>

**Versões**

-   Desenvolvimento (1993-2000)
-   Versão 1 (2000-2004)
-   Versão 2 (2004-2013)
-   Versão 3 (2013-2020)
-   Versão 4 (2020-atual)

**IDE (*Integrated Development Environment*)**

-   Interface: RStudio (2011-atual)
-   Atualmente: **R Core Team**

![](img/person_gentleman_ihaka.jpg){.absolute width="550" height="400" right="-50" top="200"}

::: footer
[Wickham (2013)](http://vita.had.co.nz/papers/r-s.pdf)
:::

## Histórico - Linguagem R {.smaller}

::: columns
::: {.column width="50%"}
::: nonincremental
<center><img src="img/r_history.png" style="width:75%"/></center>
:::
:::

::: {.column width="50%"}
::: nonincremental
<center><img src="img/r_history_plot.png" style="width:100%"/></center>
:::
:::
:::

::: footer
[Giorgi et al. (2022)](https://doi.org/10.3390/life12050648)
:::

## Aplicações {.smaller}

**Manipulação, visualização e análise de dados**

-   Estatísticas univariadas e multivariadas
-   Análises de dados ecológicos
-   Análise de dados espaciais, temporais e sonoros
-   Análise de dados funcionais, genéticos e filogenéticos
-   Análise de dados geoespaciais e sensoriamento remoto
-   Visualização de todos os tipos de dados anteriores

**R Markdown e quarto**

-   Textos em HTML, PDF, Word, ODT, Markdown
-   Slides, Websites, Blogs, Livros e Artigos
-   Shiny

![](img/r_markdown_output_formats.png){.absolute width="400" height="400" right="-100" top="150"} ![](img/quarto.png){.absolute width="400" height="100" right="-100" top="570"}

::: footer
[R Markdown](https://rmarkdown.rstudio.com/), [shiny](https://shiny.rstudio.com/), [quarto](https://quarto.org/)
:::

## IDE

Ambiente de Desenvolvimento Integrado (*Integrated Development Environment*)

<br><br>

<center><img src="img/rstudio_logo.svg" style="width:80%"/></center>

::: footer
[RStudio](https://posit.co/downloads/)
:::

## IDE

Ambiente de Desenvolvimento Integrado (*Integrated Development Environment*)

![](img/r_rstudio01.png){.absolute width="700" height="180" right="180" top="200"} ![](img/r_rstudio02.png){.absolute width="700" height="280" right="180" top="370"}

::: footer
[Ismay & Kim (2020)](https://posit.co/downloads/)
:::

## Interface

<center><img src="img/rstudio.png" style="width:100%"/></center>

::: footer
[RStudio](https://www.rstudio.com/)
:::

## Projeto R (.Rproj)

-   Facilita o trabalho em múltiplos ambientes
-   Cada projeto possui seu diretório, documentos e workspace
-   Permite controle de versão (git e GitHub)

<br>

<center><img src="img/rstudio_project_logo.png" style="width:25%"/></center>

::: footer
[RStudio](https://www.rstudio.com/)
:::

# Antes de começarmos...

## Conferindo os computadores

<center><img src="img/general_hard_soft_bg.png" style="width:80%"/></center>

::: footer
[Café com Código](https://www.instagram.com/cafecomcodigo/?hl=pt)
:::

# 

<center><img src="img/code.png" style="width:45%"/></center>

## Console

O console é onde a linguagem R instalada é carregada para executar os códigos

<center><img src="img/rstudio_script.png" style="width:55%"/></center>

::: footer
[RStudio](https://www.rstudio.com/)
:::

## Console

-   Na janela do console aparece o símbolo `>`, seguido de uma barra vertical `|` que fica piscando (cursor), onde digitamos ou enviamos nossos códigos do script

-   Vamos digitar `10 + 2` e apertar a tecla `Enter` para que essa operação seja executada

-   O resultado retorna o valor `12`, precedido do valor `1` entre colchetes `[1]`

```{r}
10 + 2
```

## Console

-   Os colchetes `[]` demonstram a posição do elemento numa sequência de valores

-   Vamos criar uma sequência usando o operador `:` para demonstrar isso

-   O número que aparecer nos colchetes vai depender da largura das janelas

```{r}
1:42
```

## Console {.smaller}

**Noções de programação**

Número inteiro (*integer*)

```{r}
1
```

. . .

Número decimal (*float* ou *double*)

```{r}
1.2
```

. . .

Texto entre aspas simples (`''`) ou duplas (`""`) (*character* ou *string*)

```{r}
"Este é o número 1"
```

. . .

Lógico (letras maiúsculas) (*booleano*)

```{r}
TRUE
FALSE
```

## Script

Onde os códigos são escritos e salvos no formato .R

-   Atalho: `ctrl + shift + N`

<center><img src="img/rstudio_script.jpg" style="width:80%"/></center>

## Script

-   Os códigos devem ser digitados preferencialmente no script

-   Para executar um código, deixem o cursor em qualquer lugar da linha

-   Atalho: `ctrl + enter`

```{r}
1
```

<br>

```{r}
1 + 2
```

## Script

**Salvar um script**

-   Atalho: `ctrl + S`

<center><img src="img/rstudio_script.png" style="width:50%"/></center>

## Script

**Comentários (#)**

-   Comentários não são lidos pelo R e descrevem informações em nosso script

-   São representados pelo `#` (hash) ou `#'` (hash-linha)

```{r}
# comentarios
# o r nao le o codigo depois do # (hash)

42 # essas palavras nao sao executadas, apenas o 42
```

## Script

**Comentários (#)**

-   Sempre comece um script com um cabeçalho

-   Ajuda a lembrar o que o script faz e quando foi escrito

```{r}
#' ----
#' título: modelos estatisticos em ecologia
#' autor: seu nome
#' data: 2023-04-26
#' ----
```

# 

<center><img src="img/general_comment_gandalf.jpg" style="width:50%"/></center>

## Operadores

**Operadores aritméticos (retorna números)**

| Operador |      Descrição       |   Uso   |
|:--------:|:--------------------:|:-------:|
|    \+    |        Adição        |  a + b  |
|    --    |      Subtração       |  a - b  |
|    \*    |    Multiplicação     | a \* b  |
|    /     |       Divisão        |  a / b  |
|    %%    |   Resto da divisão   | a %% b  |
|   %/%    | Quociente da divisão | a %/% b |
|    \^    |     Potenciação      |  a\^b   |

## Operadores

**Operadores relacionais (retorna TRUE\|FALSE)**

| Operador |       Descrição       |   Uso    |
|:--------:|:---------------------:|:--------:|
|    \<    |         Menor         |  a \< b  |
|    \>    |         Maior         |  a \> b  |
|   \<=    |    Menor ou igual     | a \<= b  |
|   \>=    |    Maior ou igual     | a \> = b |
|    ==    |         Igual         |  a == b  |
|    !=    | Não igual (diferente) |   a!=b   |

## Operadores

**Ordem das operações aritméticas**

<br>

`()` \> `^` \> `*` ou `/` \> `+` ou `-`

<br>

```{r}
# sem especificar - segue a ordem das operações
1 * 2 + 2 / 2 ^ 2
```

<br>

```{r}
# especificando - segue a ordem dos parênteses
((1 * 2) + (2 / 2)) ^ 2
```

## Objetos

Palavras que atribuímos (guardamos) dados possibilitando sua manipulação

-   Atribuição (`<-`)

-   palavra \<- dados

-   Atalho: `alt + -`

![](img/general_assign.jpg){.absolute width="380" height="480" right="50" top="200"}

## Objetos

Vamos atribuir o valor `10` à palavra `eco`

```{r}
# atribuicao - simbolo (<-)
eco <- 10 
```

# 

<center><img src="img/gif_where.gif" style="width:100%"/></center>

## Objetos

-   Sempre confira a atribuição

-   **Dica**: chame o objeto novamente

```{r}
# atribuicao - simbolo (<-)
eco <- 10 
eco
```

## Objetos

**Seja criativo**

O R sobrescreve os valores dos objetos com o mesmo nome

```{r}
# eco vale 10
eco <- 10 
eco
```

<br>

```{r}
# agora eco vale 2
eco <- 2 
eco
```

## Objetos {.smaller}

**Seja criativo, mas nem tanto...**

O R tem limitações ao nomear objetos!

1.  Começar por letras (`a-z` ou `A-Z`) ou pontos (`.`)

2.  Conter letras (`a-z` ou `A-Z`), números (`0-9`), underscores (`_`) ou pontos (`.`)

3.  *Case-sensitive*, i.e., ele difere letras maiúsculas de minúsculas

4.  Evitar utilizar letras maiúsculas, acentos ou cedilha (`ç`)

5.  Não podem ser iguais a nomes especiais: `break, else, FALSE, for, function, if, Inf, NA, NaN, next, repeat, return, TRUE, while`

```{r error=TRUE}
for <- 1
```

## Objetos

**Ambiente (*Environment*)**

Os objetos podem ser visualizados no painel *Environment*

<center><img src="img/rstudio_script.png" style="width:50%"/></center>

## Objetos

Podemos utilizar objetos para fazer operações

```{r}
# definir dois objetos
eco1 <- 10
eco2 <- 2
```

. . .

<br>

```{r}
# operacoes com objetos
eco1 + eco2 # adicao
eco1 - eco2 # subtracao
eco1 * eco2 # multiplicacao
eco1 / eco2 # divisao
```

## Objetos

Podemos utilizar objetos para atribuir resultados de operações

```{r}
# operacoes com objetos e atribuicao
adi <- eco1 + eco2 # adicao
adi

sub <- eco1 - eco2 # subtracao
sub

mul <- eco1 * eco2 # multiplicacao
mul

div <- eco1 / eco2 # divisao
div
```

## Objetos

**Tipos de objetos**

<center><img src="img/r_data_structures_general.png" style="width:70%"/></center>

## Funções {.smaller}

Códigos que realizam operações em argumentos

-   Estrutura de uma função:

`nome_da_funcao(argumento1, argumento2)`

<br>

1.  **Nome da função**: remete ao que ela faz (inglês)
2.  **Parênteses**: limitam a função
3.  **Argumentos**: onde a função atuará
4.  **Vírgulas**: separam os argumentos

![](img/code_function_annotated.png){.absolute width="600" height="300" right="-100" top="350"}

------------------------------------------------------------------------

## Funções

**Exemplos**

```{r}
# soma
sum(10, 2)

# soma de objetos
sum(eco1, eco2)

# soma de objetos atribuidos a objetos
eco_sum <- sum(eco1, eco2)
eco_sum
```

## Funções

**Argumentos**

Os argumentos podem ser de dois tipos:

1.  **Objetos ou valores**: dados onde a função irá atuar

2.  **Parâmetros**: mudam o comportamento da função (texto = `TRUE`, `FALSE` ou `"texto"`)

```{r}
sum(1, 2, 3, NA)
sum(1, 2, 3, NA, na.rm = TRUE)
```

## Funções

**Argumentos como valores**

```{r}
# funcoes - argumentos como valores
sum(10, 2)
prod(10, 2)
```

. . .

**Argumentos como objetos**

```{r}
# funcoes - argumentos como objetos
sum(eco1, eco2)
prod(eco1, eco2)
```

## Funções

**Argumentos como parâmetros**

```{r}
# repeticao - vezes
rep(x = 1:5, times = 5)
```

<br>

. . .

```{r}
# repeticao - cada
rep(x = 1:5, each = 5)
```

## Funções

**Atribuição de resultados a objetos**

```{r}
# atribuicao dos resultados
rep_times <- rep(x = 1:5, times = 5)
rep_times
```

<br>

. . .

```{r}
rep_each <- rep(x = 1:5, each = 5)
rep_each
```

## Funções

**Atribuição, função e linha temporal**

Criar dois objetos

```{r}
# criar dois objetos
foo <- 2
bar <- 3
```

Somar esses objetos e atribuição

```{r}
# somar e atribuir
su <- sum(foo, bar)
su
```

Raiz quadrada e atribuição

```{r}
# raiz e atribuir
sq <- sqrt(su)
sq
```

## Funções

**Atribuição, função e linha temporal**

1.  Atribuição de dados a objetos

2.  Funções que operam e mudam esses dados

3.  Nova atribuição desses resultados a novos objetos

```{r}
# criar dois objetos
foo <- 2
bar <- 3

# somar e atribuir
su <- sum(foo, bar)

# raiz e atribuir
sq <- sqrt(su)
```

## Ajuda {.smaller}

Descreve as informações de uma função

```{r eval=FALSE}
# descreve as informacoes de uma funcao
help("mean") # arquivo .html
?mean
```

::: columns
::: {.column width="50%"}
![](img/r_help.png){.absolute width="450" height="450" right="600" top="220"}
:::

::: {.column width="50%"}
<br> **Description**: descrição da função\
**Usage**: uso da função e argumentos\
**Arguments**: argumentos e suas especificações\
**Details**: detalhes da função\
**Value**: interpretar a saída (*output*)\
**Note**: notas sobre a função\
**Authors**: autores da função\
**References**: referências bibliográficas da função\
**See also**: funções relacionadas\
**Examples**: exemplos do uso da função
:::
:::

## Pacotes

Conjunto de funções extras para executar tarefas específicas

<center><img src="img/r_packages.svg" style="width:70%"/></center>

## Pacotes

Duas fontes

-   CRAN (*Comprehensive R Archive Network*)
-   GitHub (Repositório de códigos)

```{r eval=FALSE}
# numero de pacotes no cran
nrow(available.packages())
```

<center><img src="img/r_number_packages.png" style="width:35%"/></center>

::: footer
[CRAN](https://cran.r-project.org/), [Scraping CRAN with rvest](https://www.r-bloggers.com/2017/03/scraping-cran-with-rvest/)
:::

## Pacotes {.smaller}

**Instalação de pacotes**

1.  Download do pacote para o computador (como instalar um software/APP)
2.  Precisa estar conectado à internet
3.  O nome do pacote precisa estar entre aspas
4.  Função (CRAN): `install.packages("pacote")`

**Instalar o pacote vegan**

```{r eval=FALSE}
# instalar pacotes
install.packages("vegan")
```

**Verificar pacotes instalados**

```{r eval=FALSE}
# verificar pacotes instalados
library()
```

## Pacotes {.smaller}

**Carregamento de pacotes**

1.  Carregar o pacote para o R (como abrir software/APP)
2.  Carrega-se toda vez que se abre o R
3.  Não precisa estar conectado à internet
4.  O nome do pacote não precisa estar entre aspas
5.  Funções: `library(pacote)` ou `require(pacote)`

**Carregar o pacote vegan**

```{r}
# carregar pacotes
library(vegan)
```

**Verificar pacotes carregados**

```{r}
# verificar pacotes carregados
search()
```

# Principais erros

# Se seu script rodou sem erros, tem algo errado...

# 

<center><img src="img/general_make_impossible.png" style="width:60%"/></center>

# 

<center><img src="img/gif_bugcat_error.gif" style="width:70%"/></center>

# 

<center><img src="img/gif_bugcat_sad.gif" style="width:70%"/></center>

# 

Help me help you: um bestiário para entender erros e pedir ajuda no R

<center><img src="img/debugging.png" style="width:40%"/></center>

::: footer
[Help me help you: um bestiário para entender erros e pedir ajuda no R](https://anotherecoblog.wordpress.com/2020/08/26/help-me-help-you-um-bestiario-para-entender-erros-e-pedir-ajuda-no-r/)
:::

## Principais erros

**1. Esquecer de completar um código (+)**

Parênteses

```{r error=TRUE}
sum(1, 2
    +
```

Aspas

```{r error=TRUE}
"string
+
```

## Principais erros

**2. Esquecer da vírgula**

```{r error=TRUE}
sum(1 2)
```

<br>

**3. Chamar um objeto errado**

```{r error=TRUE}
obj <- 10
OBJ
```

## Principais erros

**4. Esquecer de carregar um pacote**

```{r echo=FALSE}
detach("package:vegan", unload = TRUE)
```

```{r error=TRUE}
# carregar dados
data(dune)

# funcao do pacote vegan
decostand(dune, "hell")
```

## Principais erros

**4. Esquecer de carregar um pacote**

```{r}
# carregar o pacote
library(vegan)

## carregar dados
data(dune)

## funcao do pacote vegan
decostand(dune, "hell")
```

## Principais erros

**5. Usar o nome da função de forma errônea**

```{r error=TRUE}
colsums(dune)
```

<br>

```{r error=TRUE}
colSums(dune)
```

# Dúvidas?

## Desafio 02

1. crie um objeto chamado "parcelas" de modo que ele seja: "parcela1, parcela2, parcela3, ....., parcela 1000". Use a função "paste0()"
2. crie um objeto chamado "cont_trat"  sendo composto por 4000 "controle" e 4000 "tratamento". Use a função "rep()"
3. crie um objeto chamado "presenca_ausencia" sendo composto por números aleatórios de 0 e 1,  com comprimento 8000 elementos. Use a função "sample()"
4. crie um objeto chamado "abundacia"  sendo composto por números aleatórios entre 0 a 100,  com comprimento 8000 elementos. Use a função "sample()"

# Valeu gente!
